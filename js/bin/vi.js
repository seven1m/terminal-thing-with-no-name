// simple vi-like editor

const MODES = [
  'normal', // 0
  'insert', // 1
  'command' // 2
]

const KEYS = {
  backspace: 8,
  enter: 13
}

class Vi extends Program {
  constructor(...args) {
    super(...args)
    this.mode = 0
    const dataString = `
1

3

5

7

9

11

13

15
16IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
17

19
`
    this.data = new Rope(dataString)
    this.lineLengths = dataString.split(/\n/).map((line) => line.length)
    this.topLineInWindow = 0
    this.lineNum = 0
    this.firstCharInWindow = 0
    this.x = 1
    this.y = 1
  }

  get width() {
    return this.term.geometry[0]
  }

  get height() {
    return this.term.geometry[1]
  }

  get currentLineLength() {
    return this.lineLengths[this.lineNum]
  }

  get currentLineHeight() {
    return this.getLineHeight(this.lineNum)
  }

  get lineCount() {
    return this.lineLengths.length
  }

  getLineHeight(lineNum) {
    return Math.ceil(this.lineLengths[lineNum] / this.width)
  }

  redraw() {
    this.term.clear()
    let lineNum = this.topLineInWindow
    let charNum = this.firstCharInWindow
    let lineSegment
    y: for (let y = 1; y <= this.height;) {
      this.jump(1, y)
      const lineLength = this.lineLengths[lineNum]
      const line = this.data.substr(charNum, lineLength)
      const segments = stringToSegments(line, this.width)
      for (let s = 0; s < segments.length; s++) {
        const segment = segments[s]
        this.write(segment)
        charNum = charNum + segment.length
        y++
        if (y > this.height) break y
      }
      charNum++ // one extra for the newline
      lineNum++
    }
    this.move() // reset cursor
  }

  write(string) {
    this.stdout.write(string.replace(/\r?\n/g, '\r\n'))
  }

  main(status) {
    //const path = this.args[0]
    this.redraw()
    this.move(1, 1)
    this.normalMode()
    this.stdin.bind(this.handleKey.bind(this))
    this.exit = status
  }

  normalMode() {
    this.mode = 0
    this.clearStatus()
    this.move()
  }

  insertMode() {
    this.mode = 1
    this.message('-- INSERT --')
  }

  commandMode() {
    this.mode = 2
    this.clearStatus()
    this.moveY(this.height)
    this.stdout.write(':')
    this.command = ':'
  }

  move(x, y) {
    if (x) this.x = x
    if (y) this.y = y
    this.jump(this.x, this.y)
  }

  jump(x, y) {
    this.stdout.write(`\x1B[${y};${x}f`)
  }

  moveX(x) {
    this.move(x)
  }

  moveY(y) {
    this.move(null, y)
  }

  clearStatus() {
    this.stdout.write(`\x1B[${this.height};0f`)
    for (let i = 0; i < this.width - 1; i ++) { this.stdout.write(' ') }
  }

  message(msg) {
    this.stdout.write(`\x1B[${this.height};0f`)
    this.stdout.write(msg)
    this.move()
  }

  executeCommand() {
    const command = this.command.trim().replace(/^:/, '')
    switch (command) {
      case 'q':
        this.stdout.writeln('')
        this.exit(0)
        break
      default:
        this.message(`unknown command: ${command}`)
        this.normalMode()
    }
  }

  handleKey(key, ev) {
    switch (this.mode) {
      case 0:
        let lineHeight, lineLength, jumpCount
        switch (ev.key) {
          case '0':
            this.moveX(1)
            break
          case '$':
            this.moveX(this.lineLengths[this.lineNum])
            break
          case 'h':
          case 'ArrowLeft':
          case 'Backspace':
            this.moveX(Math.max(0, this.x - 1))
            break
          case 'j':
          case 'ArrowDown':
          case 'Enter':
            lineLength = this.lineLengths[this.topLineInWindow]
            lineHeight = this.getLineHeight(this.lineNum)
            console.log(lineHeight)
            this.lineNum = Math.min(this.lineNum + 1, this.lineCount)
            if (this.y + lineHeight > this.height - 1) {
              jumpCount = this.getLineHeight(this.topLineInWindow)
              this.topLineInWindow++
              this.firstCharInWindow = this.firstCharInWindow + lineLength + 1
              this.redraw()
              this.moveY(this.y - jumpCount + lineHeight)
            } else {
              this.moveY(this.y + lineHeight)
            }
            break
          case 'k':
          case 'ArrowUp':
            this.lineNum = Math.max(this.lineNum - 1, 0)
            lineHeight = this.getLineHeight(Math.max(this.lineNum - 1, 0))
            if (this.y - lineHeight < 1) {
              this.topLineInWindow = Math.max(this.topLineInWindow - 1, 0)
              lineLength = this.lineLengths[this.topLineInWindow]
              this.firstCharInWindow = Math.max(this.firstCharInWindow - (lineLength + 1), 0)
              this.redraw()
            } else {
              this.moveY(this.y - lineHeight)
            }
            break
          case 'l':
          case 'ArrowRight':
            this.moveX(Math.min(this.x + 1, this.width))
            break
          case 'i':
            this.insertMode()
            break
          case ':':
            this.commandMode()
            break
        }
        break
      case 1:
        switch (ev.key) {
          case 'Backspace':
            this.stdout.write('\b \b')
            break
          case 'Escape':
            this.normalMode()
            break
          default:
            this.x = this.x + key.length
            this.stdout.write(key)
        }
        break
      case 2:
        switch (ev.keyCode) {
          case KEYS.enter:
            this.executeCommand()
            break
          case KEYS.backspace:
            this.command = this.command.substring(0, this.command.length - 1)
            this.stdout.write('\b \b')
            break
          default:
            this.command = this.command + key
            this.stdout.write(key)
        }
        break
    }
  }
}

const stringToSegments = (string, width) => {
  if (string.length <= width) {
    return [string]
  } else {
    let consumed = 0
    let segments = []
    while (consumed < string.length) {
      segments.push(string.substr(consumed, width))
      consumed = consumed + width
    }
    return segments
  }
}

export default Vi
